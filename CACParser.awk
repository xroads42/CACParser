# awk script zu auslesen von CACs generiert von pdftotext -raw
# nicht die poppler version. die von xpdf
# nutzung gawk  -f CACParser.awk -v title="Name der Veranstatung" text.txt

#awk script. reads txt files generated by pdftotext -raw -enc UFT-8 filename.pdfs
#
# works with pdfs generated by dogshowmanager
# testet with pdftotext version 0.62.0 from Poppler-utils
# may also work with pdftotext from xpdf-tools (wich is needed for -table option)
#
#usage: gawk  -f CACParser.awk -v title="Tournament Name" filename.txt>out_filename.csv

function ltrim(s) { sub(/^[ \t\r\n]+/, "", s); return s }
function rtrim(s) { sub(/[ \t\r\n]+$/, "", s); return s }
function trim(s)  { return rtrim(ltrim(s)); }

function checkClass() {
  cl=$0

  if(cl ~ regShowClass){
      print "Class found in"  $0 > "/dev/stderr"
      if(cl!~"Ring:"){
        getline
        cl=cl $0
        getline
        cl=cl $0

      }
      split(cl,a,"Ring: ")
      dog_result["RingNr"]=trim(a[2])
      #print  "ring: " a[2]
      split(a[1],a,",")

      dog_result["JudgeNat"]=trim(a[2])

      split(a[1],a,"| Richter: ")
      dog_result["Judge"]=trim(a[2])

      sexSep="Rüden|Hündinnen"
      split(a[1],a,sexSep,ssep)
      dog_result["Sex"]=trim(ssep[1])
      dog_result["Race"]=trim(a[1])
      split(trim(a[2]), a, "(")
      dog_result["Class"]=trim(a[1])
      split(trim(a[2]), a, ")")
      dog_result["ClassDogCount"]=a[1]
      #print dog_result["Race"]
    }
    return
  }




function checkDog() {
if($0 ~ regDog) {

    print "Dog found in"  $0 > "/dev/stderr"
  #  print $0
    split($0,a,"\\|")
    dog_result["DogDoB"]=trim(a[3])

    dog_result["DogName"]=trim(a[1])
    sb=trim(a[2])
    last=split(sb, a," ")
    dog_result["DogStudBook"]=a[1]
    dog_result["DogStudBookNr"]=""
    for (i=2; i<=last; i++) {
      #print a[i]
      dog_result["DogStudBookNr"]= dog_result["DogStudBookNr"] " " a[i]
    }
    dog_result["DogStudBookNr"]=trim(dog_result["DogStudBookNr"])
    #print "start"

  }
  getDogResult()
  return
}

function getDogResult() {
    dog_result["Result"]=""
    if($0~/^B:/){
      if(split($0,a,"B: ")>1){
      #print "B: gefunden" $0 a[2]
      dog_result["Result"]=a[2]
    }
print "Resutl founf in "  $0 > "/dev/stderr"


      b[1]=""
      getline
      for(i=1;$0!~/^[1-9][0-9]{0,3}/;++i){
        #print "line in for" $0
        b[i]=$0
        getline
      }
    #  print "anzahl b " i
      dog_result["CNr"]=$0
      split(b[i-1], c, ", ")
      dog_result["Owner"]=trim(c[1])
      dog_result["OwnerNat"]=trim(c[2])
      #print " i " i
      for(n=1;n<=(i-2);n++){
        if(b[n]!~/^MB:/){
            #print "b n" b[n] "n " n
            dog_result["Result"]=dog_result["Result"] trim(b[n])
        }
        else {
        #  print "MB gefunden " b[n]
        }
      }

      res= dog_result[table_order[1]]  ";"
      for (i=2; i<=16; ++i) {
        res = res dog_result[table_order[i]] ";"
      }
      print res

      }
      #print "result " dog_result["Result"]
      return
}







BEGIN{

  regDog ="\\| .*\\| .*"
  regShowClass="\\| Richter:.*"
  #whitespace=/[[:space:]]{2,}/
  table_order[1]="Tournament"
  table_order[2]="Race"
  table_order[3]="Sex"
  table_order[4]="Class"
  table_order[5]="ClassDogCount"
  table_order[6]="RingNr"
  table_order[7]="JudgeNat"
  table_order[8]="Judge"
  table_order[9]="DogName"
  table_order[10]="DogDoB"
  table_order[11]="DogStudBook"
  table_order[12]="DogStudBookNr"
  table_order[13]="CNr"
  table_order[14]="OwnerNat"
  table_order[15]="Owner"
  table_order[16]="Result"
  header=""
  for (i=1; i<=16; ++i) {
    header=header  table_order[i] ";"
  }
  print header
  dog_result["Tournament"]=title


}
{
  #  print "start with"  $0 > "/dev/stderr"
      checkClass()
      checkDog()

}
